# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CD with Gradle

on:
  push:
    branches:
      - main
      
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Create application.yml
        run: |
          mkdir -p be/src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > be/src/main/resources/application.yml         

      - name: Grant execute permission for gradlew
        run: chmod +x be/gradlew
        
      - name: Build with Gradle
        run: cd be && ./gradlew build
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY  }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd be && docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Install SSH client
        run: sudo apt-get install openssh-client -y
        
      - name: Add host key to known hosts
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts        
          
      - name: Deploy to EC2 via SSH
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY  }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${EC2_HOST} << EOF
            echo "Logging into ECR..."
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            echo "Stopping and removing existing container..."
            docker stop sharefit-server || true
            docker rm sharefit-server || true
            echo "Removing Docker image..."
            docker images -a | grep "sharefit" | awk '{print \$3}' | xargs docker rmi -f || true
            echo "Pulling Docker image..."
            docker pull $ECR_REGISTRY/sharefit:$IMAGE_TAG
            echo "Running new container..."
            docker run --restart always --name sharefit-server -d -p 8080:8080 $ECR_REGISTRY/sharefit:$IMAGE_TAG
          EOF
